
# 2025-03-31 11:45:32.821008
+# Contexte
+Je développe un agent IA rédactionnel pour générer un mémoire académique. L'agent fonctionne partiellement, mais présente plusieurs bugs critiques à résoudre. J'ai importé des documents avec succès mais rencontre des erreurs lors de l'accès aux endpoints API et certaines fonctionnalités ne s'exécutent pas correctement.
+
+# Problèmes identifiés
+1. Erreur 500 (Internal Server Error) lors de l'appel à /entreprises
+2. Erreurs de connexion HTTP à /journal/entries avec message "Max retries exceeded"
+3. KeyError: 'count' dans le traitement des tags (app.py, ligne 716)
+4. Messages de debugging trop verbeux dans l'interface utilisateur
+5. La fonctionnalité de génération de plan dans l'éditeur de mémoire ne fonctionne pas
+
+# Tâche
+Fournir des solutions de code pour chacun des problèmes identifiés:
+
+## 1. Corriger l'erreur 500 sur l'endpoint /entreprises
+Analyser pourquoi l'endpoint renvoie une erreur serveur interne et proposer une correction.
+
+## 2. Résoudre les erreurs de connexion à /journal/entries
+Identifier pourquoi les connexions échouent et implémenter une solution robuste avec gestion d'erreurs appropriée.
+
+## 3. Corriger le KeyError: 'count' pour les tags
+Examiner le traitement des tags dans app.py (ligne 716) et proposer une solution pour gérer correctement le cas où 'count' n'existe pas.
+
+## 4. Améliorer l'affichage des messages de debugging
+Proposer un système de logging plus discret avec différents niveaux de verbosité (ERROR, WARNING, INFO, DEBUG) et un mécanisme pour les activer/désactiver.
+
+## 5. Déboguer la fonctionnalité de génération de plan
+Identifier pourquoi la génération de plan ne fonctionne pas et proposer une solution.
+
+# Format de réponse attendu
+- Pour chaque problème, fournir:
+  - Une analyse de la cause probable
+  - Le code correctif complet (pas seulement des fragments)
+  - Des explications sur le fonctionnement de la solution
+- Utiliser des blocs de code markdown pour toutes les solutions proposées
+- Indiquer clairement les fichiers à modifier et l'emplacement des changements
+
+# Informations supplémentaires
+- L'application utilise vraisemblablement un backend Flask ou FastAPI
+- Les données sont apparemment stockées dans une base de données
+- L'interface frontend est construite en React ou Vue.js
+- L'objectif est d'avoir un agent capable de générer un mémoire complet basé sur des documents importés et un journal de bord

# 2025-03-31 12:55:38.674150
+auto_apply on

# 2025-03-31 12:56:18.704000
+# Correction des problèmes de l'agent IA rédactionnel
+
+## Contexte
+Je développe un agent IA pour générer un mémoire académique. L'application présente plusieurs erreurs qui doivent être corrigées. Grâce à vos nouvelles capacités de modification de fichiers, je souhaite que vous corrigiez directement ces problèmes.
+
+## Problème spécifique à corriger
+Erreur 500 (Internal Server Error) lors de l'appel à /entreprises
+
+## Fichier concerné
+services/memory_service.py - Méthode get_entreprises()
+
+## Correction à appliquer
+Modifier la méthode pour gérer correctement les valeurs NULL dans la colonne date_fin et améliorer la gestion d'erreurs.
+
+## Instructions
+1. Sauvegardez d'abord le fichier original
+2. Modifiez directement le fichier avec la solution
+3. Fournissez un rapport des modifications effectuées
+
+Merci de me confirmer une fois les modifications appliquées.

# 2025-03-31 13:01:33.068998
+changes report

# 2025-03-31 13:33:33.916447
+auto_apply on

# 2025-03-31 13:34:06.576728
+# Test de modification et sauvegarde de fichier
+
+## Contexte
+Tu as précédemment identifié plusieurs corrections à apporter à notre agent IA de rédaction de mémoire. Je souhaite vérifier que tu es bien capable d'appliquer directement ces modifications aux fichiers sources.
+
+## Action demandée
+Je te demande d'ÉCRIRE et de MODIFIER directement le fichier backend/services/memory_service.py pour ajouter la méthode get_entreprises() que tu as déjà identifiée.
+
+## Détails de la modification
+Tu as déjà fourni le code correct pour cette méthode:
+
+```python
+async def get_entreprises(self) -> List[Dict]:
+    """Récupère la liste des entreprises"""
+    def _get_entreprises():
+        conn = self.get_connection()
+        try:
+            cursor = conn.cursor()
+            cursor.execute('''
+                SELECT id, nom, date_debut,
+                    COALESCE(date_fin, '') as date_fin
+                FROM entreprises
+                ORDER BY date_debut DESC
+            ''')
+            return [dict(row) for row in cursor.fetchall()]
+        except Exception as e:
+            logger.error(f"Erreur DB: {str(e)}")
+            return []
+        finally:
+            conn.close()
+    return await asyncio.to_thread(_get_entreprises)
+Instructions
+
+Utilise ta fonctionnalité d'écriture de fichiers pour APPLIQUER cette modification directement
+MODIFIE le fichier backend/services/memory_service.py pour y ajouter cette méthode
+CONFIRME que la modification a été effectuée
+
+Je veux vérifier que tu peux bien ENREGISTRER ces changements dans le fichier lui-même et pas seulement me les montrer. Utilise pour cela les capacités d'écriture de fichiers qui ont été ajoutées à ton système.
+Merci de modifier ce fichier et de confirmer l'opération.

# 2025-03-31 13:59:48.941559
+restore /mnt/c/Users/arthu/Desktop/memoire-agent/backend/services/memory_service.py

# 2025-03-31 14:00:09.597109
+restore C:\Users\arthu\Desktop\memoire-agent\backups\session_20250331_133316\backend\services\memory_service.py

# 2025-03-31 14:10:01.502886
+# modification et sauvegarde de fichier
+
+## Contexte
+Tu as précédemment ajouter la méthode get_entreprises à la classe MemoryManager dans le fichier memory_service.py.
+
+## Action demandée
+Je t'ai précédemment demandé d'ÉCRIRE et de MODIFIER directement le fichier backend/services/memory_service.py pour ajouter la méthode get_entreprises() que tu as déjà identifiée.
+
+
+## Détails de la modification
+Tu as déjà fourni le code correct pour cette méthode:
+
+```python
+async def get_entreprises(self) -> List[Dict]:
+    """Récupère la liste des entreprises"""
+    def _get_entreprises():
+        conn = self.get_connection()
+        try:
+            cursor = conn.cursor()
+            cursor.execute('''
+                SELECT id, nom, date_debut,
+                    COALESCE(date_fin, '') as date_fin
+                FROM entreprises
+                ORDER BY date_debut DESC
+            ''')
+            return [dict(row) for row in cursor.fetchall()]
+        except Exception as e:
+            logger.error(f"Erreur DB: {str(e)}")
+            return []
+        finally:
+            conn.close()
+    return await asyncio.to_thread(_get_entreprises)
+
+##Erreur commise
+Tu as commis une erreur : tu as effectué un remplacement complet du fichier au lieu d'ajouter simplement la méthode get_entreprises() à l'endroit approprié. Le diff montre que:
+
+Le fichier original commençait par des imports et commentaires
+Le fichier modifié ne contient plus que la nouvelle méthode et une ligne de commentaire
+Tous les autres imports, classes, méthodes et code ont été supprimés.
+
+##Follow-up
+grâce à ta sauvegarde :
+Session: 2025-03-31 13:35:10 Nombre de fichiers modifiés: 1
+memory_service.py
+Chemin: /mnt/c/Users/arthu/Desktop/memoire-agent/backend/services/memory_service.py Sauvegarde: backups/session_20250331_133316/backend/services/memory_service.py
+
+j'ai pu restaurer le fichier original, dénudé de la méthode get_entreprises à la classe MemoryManager.
+
+##Instructions
+
+Utilise ta fonctionnalité d'écriture de fichiers pour APPLIQUER cette modification directement
+MODIFIE le fichier backend/services/memory_service.py pour y ajouter cette méthode
+CONFIRME que la modification a été effectuée
+
+Utilise pour cela les capacités d'écriture de fichiers qui ont été ajoutées à ton système.
+Merci de modifier ce fichier et de confirmer l'opération.
+
+Le résultat attendu est le fichier memory_service.py dans son entièreté avec les modifications apportées.
+
+

# 2025-03-31 15:49:24.295239
+# Test de modification ciblée de fichier
+
+## Contexte
+Tu as maintenant de nouvelles capacités pour modifier des fichiers de façon ciblée. Je souhaite tester cette fonctionnalité.
+
+## Action demandée
+Je te demande de MODIFIER le fichier backend/services/memory_service.py pour ajouter une nouvelle méthode get_missions() à la classe MemoryManager, juste après la méthode get_entreprises() existante.
+
+## Détails de la modification
+Voici le code à ajouter:
+
+```python
+async def get_missions(self) -> List[Dict]:
+    """Récupère la liste des missions effectuées"""
+    def _get_missions():
+        conn = self.get_connection()
+        try:
+            cursor = conn.cursor()
+            cursor.execute('''
+                SELECT id, titre, description, date_debut,
+                    COALESCE(date_fin, '') as date_fin,
+                    entreprise_id
+                FROM missions
+                ORDER BY date_debut DESC
+            ''')
+            return [dict(row) for row in cursor.fetchall()]
+        except Exception as e:
+            logger.error(f"Erreur DB: {str(e)}")
+            return []
+        finally:
+            conn.close()
+    return await asyncio.to_thread(_get_missions)'''Instructions
+
+Utilise ta nouvelle capacité de modification ciblée pour ajouter cette méthode
+Place-la APRÈS la méthode get_entreprises() existante
+Respecte l'indentation existante dans le fichier
+Ne modifie rien d'autre dans le fichier
+Confirme que la modification a été effectuée correctement
+
+Je veux vérifier que tu peux désormais modifier un fichier sans remplacer son contenu.

# 2025-03-31 15:52:47.283550
+# Test de modification ciblée de fichier
+
+## Contexte
+Tu as maintenant de nouvelles capacités pour modifier des fichiers de façon ciblée. Je souhaite tester cette fonctionnalité.
+
+## Action demandée
+Je te demande de MODIFIER le fichier backend/services/memory_service.py pour ajouter une nouvelle méthode get_missions() à la classe MemoryManager, juste après la méthode get_entreprises() existante.
+
+## Détails de la modification
+Voici le code à ajouter:
+
+```python
+async def get_missions(self) -> List[Dict]:
+    """Récupère la liste des missions effectuées"""
+    def _get_missions():
+        conn = self.get_connection()
+        try:
+            cursor = conn.cursor()
+            cursor.execute('''
+                SELECT id, titre, description, date_debut,
+                    COALESCE(date_fin, '') as date_fin,
+                    entreprise_id
+                FROM missions
+                ORDER BY date_debut DESC
+            ''')
+            return [dict(row) for row in cursor.fetchall()]
+        except Exception as e:
+            logger.error(f"Erreur DB: {str(e)}")
+            return []
+        finally:
+            conn.close()
+    return await asyncio.to_thread(_get_missions)
+Instructions
+
+Utilise ta nouvelle capacité de modification ciblée pour ajouter cette méthode
+Place-la APRÈS la méthode get_entreprises() existante
+Respecte l'indentation existante dans le fichier
+Ne modifie rien d'autre dans le fichier
+Confirme que la modification a été effectuée correctement
+
+Je veux vérifier que tu peux désormais modifier un fichier sans remplacer son contenu.

# 2025-03-31 16:23:21.393690
+Test de modification SIMPLE d'un fichier
+Action Requise
+Modifie le fichier "test.txt" dans le répertoire courant. Si ce fichier n'existe pas, crée-le.
+Modification exacte à effectuer
+Ajoute la ligne suivante à la fin du fichier (ou comme seul contenu si le fichier est vide):
+CopierCeci est un test de modification réussi - [date actuelle]
+Instructions précises
+
+Utilise UNIQUEMENT la commande d'écriture de fichier que tu connais déjà
+N'essaie PAS d'analyser le contenu existant, ajoute simplement la ligne à la fin
+Confirme explicitement que le fichier a été modifié
+Partage le chemin complet du fichier que tu as modifié
+
+Je teste uniquement ta capacité d'écriture de fichier. Une opération simple est suffisante.

# 2025-03-31 16:37:39.955885
+# Test de modification SIMPLE d'un fichier
+
+## Action Requise
+Modifie le fichier "test.txt" dans le répertoire courant. Si ce fichier n'existe pas, crée-le.
+
+## Modification exacte à effectuer
+Ajoute la ligne suivante à la fin du fichier (ou comme seul contenu si le fichier est vide):
+```
+Ceci est un test de modification réussi - [date actuelle]
+```
+
+## Instructions précises
+1. Utilise UNIQUEMENT la commande d'écriture de fichier que tu connais déjà
+2. N'essaie PAS d'analyser le contenu existant, ajoute simplement la ligne à la fin
+3. Confirme explicitement que le fichier a été modifié
+4. Partage le chemin complet du fichier que tu as modifié
+
+Je teste uniquement ta capacité d'écriture de fichier. Une opération simple est suffisante.

# 2025-03-31 16:44:33.020289
+# Modification ciblée de fichier memory_service.py
+
+## Action requise
+Ajoute une nouvelle méthode `get_missions()` au fichier `/mnt/c/Users/arthu/Desktop/memoire-agent/backend/services/memory_service.py` immédiatement après la méthode `get_entreprises()`.
+
+## Code exact à ajouter
+```python
+async def get_missions(self) -> List[Dict]:
+    """Récupère la liste des missions effectuées"""
+    def _get_missions():
+        conn = self.get_connection()
+        try:
+            cursor = conn.cursor()
+            cursor.execute('''
+                SELECT id, titre, description, date_debut,
+                    COALESCE(date_fin, '') as date_fin,
+                    entreprise_id
+                FROM missions
+                ORDER BY date_debut DESC
+            ''')
+            return [dict(row) for row in cursor.fetchall()]
+        except Exception as e:
+            logger.error(f"Erreur DB: {str(e)}")
+            return []
+        finally:
+            conn.close()
+    return await asyncio.to_thread(_get_missions)
+```
+
+## Instructions spécifiques
+1. Conserve l'indentation existante du fichier
+2. Ajoute cette méthode DIRECTEMENT après la méthode `get_entreprises()`
+3. Assure-toi de conserver TOUT le contenu existant du fichier
+4. Confirme l'emplacement exact de la modification
+
+Cette modification est urgente pour notre agent IA de rédaction.

# 2025-03-31 17:08:11.784263
+# Test de la nouvelle fonctionnalité de modification de fichiers
+
+## Contexte
+Notre système a été mis à jour avec une nouvelle méthode de modification de fichiers basée sur JSON. Je souhaite tester cette fonctionnalité avec toi.
+
+## Action demandée
+Je te demande d'ajouter une méthode `get_missions()` au fichier `backend/services/memory_service.py`, juste après la méthode `get_entreprises()`.
+
+## Code à ajouter
+```python
+async def get_missions(self) -> List[Dict]:
+    """Récupère la liste des missions effectuées"""
+    def _get_missions():
+        conn = self.get_connection()
+        try:
+            cursor = conn.cursor()
+            cursor.execute('''
+                SELECT id, titre, description, date_debut,
+                    COALESCE(date_fin, '') as date_fin,
+                    entreprise_id
+                FROM missions
+                ORDER BY date_debut DESC
+            ''')
+            return [dict(row) for row in cursor.fetchall()]
+        except Exception as e:
+            logger.error(f"Erreur DB: {str(e)}")
+            return []
+        finally:
+            conn.close()
+    return await asyncio.to_thread(_get_missions)
+```
+
+## Notes importantes
+- Utilise la nouvelle méthode JSON pour appliquer cette modification
+- La méthode doit être ajoutée avec l'indentation correcte
+- Assure-toi de préserver tout le contenu existant du fichier
+
+Merci de m'informer quand la modification aura été appliquée.

# 2025-03-31 17:27:45.189762
+# Analyse de bug dans l'agent IA rédactionnel
+
+## Contexte
+L'agent IA rédactionnel présente un bug dans la génération du plan du mémoire. Lorsqu'on demande un plan détaillé, certaines sections semblent mal structurées ou incomplètes.
+
+## Bug à analyser
+Lors de l'appel à la fonction `generate_outline()` dans le fichier `backend/services/ai_service.py`, les sections générées ne respectent pas toujours la hiérarchie demandée et certains titres sont tronqués.
+
+## Tâche demandée
+J'ai besoin que tu:
+1. Analyses le problème sans modifier les fichiers
+2. Identifies la cause probable du bug
+3. Proposes une solution détaillée
+4. Expliques les implications pour le reste du projet
+
+## Hypothèses à explorer
+- Problème de format des instructions envoyées au modèle IA?
+- Problème de parsing/traitement des réponses?
+- Problème d'intégration entre AI service et Memory service?
+
+J'apprécie ton approche analytique et ta capacité à comprendre les enjeux du projet.

# 2025-03-31 17:52:28.425390
+Modifie le fichier test.txt dans le répertoire courant:
+
+Si le fichier n'existe pas, crée-le
+Si le fichier existe, ajoute une ligne à la fin
+La ligne à ajouter: "Test de restauration MCP - [date du jour]"

# 2025-03-31 18:29:51.565114
+auto_apply on

# 2025-03-31 18:30:04.716389
+Modifie le fichier test.txt dans le répertoire courant:
+
+Si le fichier n'existe pas, crée-le
+Si le fichier existe, ajoute une ligne à la fin
+La ligne à ajouter: "Test de restauration MCP - [date du jour]"

# 2025-03-31 19:43:24.079234
+# Test de modification et sauvegarde de fichier
+
+## Contexte
+Tu as précédemment identifié plusieurs corrections à apporter à notre agent IA de rédaction de mémoire. Je souhaite vérifier que tu es bien capable d'appliquer directement ces modifications aux fichiers sources.
+
+## Action demandée
+Je te demande d'ÉCRIRE et de MODIFIER directement le fichier backend/services/memory_service.py pour ajouter la méthode get_entreprises() que tu as déjà identifiée.
+
+## Détails de la modification
+Tu as déjà fourni le code correct pour cette méthode:
+
+```python
+async def get_entreprises(self) -> List[Dict]:
+    """Récupère la liste des entreprises"""
+    def _get_entreprises():
+        conn = self.get_connection()
+        try:
+            cursor = conn.cursor()
+            cursor.execute('''
+                SELECT id, nom, date_debut,
+                    COALESCE(date_fin, '') as date_fin
+                FROM entreprises
+                ORDER BY date_debut DESC
+            ''')
+            return [dict(row) for row in cursor.fetchall()]
+        except Exception as e:
+            logger.error(f"Erreur DB: {str(e)}")
+            return []
+        finally:
+            conn.close()
+    return await asyncio.to_thread(_get_entreprises)
+Instructions
+
+Utilise ta fonctionnalité d'écriture de fichiers pour APPLIQUER cette modification directement
+MODIFIE le fichier backend/services/memory_service.py pour y ajouter cette méthode
+CONFIRME que la modification a été effectuée
+
+Je veux vérifier que tu peux bien ENREGISTRER ces changements dans le fichier lui-même et pas seulement me les montrer. Utilise pour cela les capacités d'écriture de fichiers qui ont été ajoutées à ton système.
+Merci de modifier ce fichier et de confirmer l'opération.

# 2025-03-31 19:52:04.235165
+## Contexte
+Tu as précédemment identifié plusieurs corrections à apporter à notre agent IA de rédaction de mémoire. Je souhaite vérifier que tu es bien capable d'appliquer directemen
+t ces modifications aux fichiers sources.
+
+## Action demandée
+Je te demande d'ÉCRIRE et de MODIFIER directement le fichier backend/services/memory_service.py pour ajouter la méthode get_entreprises() que tu as déjà identifiée.      
+
+## Détails de la modification
+Tu as déjà fourni le code correct pour cette méthode:
+
+```python
+async def get_entreprises(self) -> List[Dict]:
+    """Récupère la liste des entreprises"""
+    def _get_entreprises():
+        conn = self.get_connection()
+        try:
+            cursor = conn.cursor()
+            cursor.execute('''
+                SELECT id, nom, date_debut,
+                    COALESCE(date_fin, '') as date_fin
+                FROM entreprises
+                ORDER BY date_debut DESC
+            ''')
+            return [dict(row) for row in cursor.fetchall()]
+        except Exception as e:
+            logger.error(f"Erreur DB: {str(e)}")
+            return []
+        finally:
+            conn.close()
+    return await asyncio.to_thread(_get_entreprises)
+Instructions
+
+Utilise ta fonctionnalité d'écriture de fichiers pour APPLIQUER cette modification directement
+MODIFIE le fichier backend/services/memory_service.py pour y ajouter cette méthode
+CONFIRME que la modification a été effectuée
+
+Je veux vérifier que tu peux bien ENREGISTRER ces changements dans le fichier lui-même et pas seulement me les montrer. Utilise pour cela les capacités d'écriture de fich
+iers qui ont été ajoutées à ton système.

# 2025-03-31 19:59:04.450408
+## Contexte
+Tu as précédemment identifié plusieurs corrections à apporter à notre agent IA de rédaction de mémoire. Je souhaite vérifier que tu es bien capable d'appliquer directemen
+
+t ces modifications aux fichiers sources.
+
+## Action demandée
+Je te demande d'ÉCRIRE et de MODIFIER directement le fichier backend/services/memory_service.py pour ajouter la méthode get_entreprises() que tu as déjà identifiée.      
+
+
+## Détails de la modification
+Tu as déjà fourni le code correct pour cette méthode:
+
+```python
+async def get_entreprises(self) -> List[Dict]:
+    """Récupère la liste des entreprises"""
+    def _get_entreprises():
+        conn = self.get_connection()
+        try:
+            cursor = conn.cursor()
+            cursor.execute('''
+                SELECT id, nom, date_debut,
+                    COALESCE(date_fin, '') as date_fin
+                FROM entreprises
+                ORDER BY date_debut DESC
+            ''')
+            return [dict(row) for row in cursor.fetchall()]
+        except Exception as e:
+            logger.error(f"Erreur DB: {str(e)}")
+            return []
+        finally:
+            conn.close()
+    return await asyncio.to_thread(_get_entreprises)
+Instructions
+
+Utilise ta fonctionnalité d'écriture de fichiers pour APPLIQUER cette modification directement
+MODIFIE le fichier backend/services/memory_service.py pour y ajouter cette méthode
+CONFIRME que la modification a été effectuée
+
+Je veux vérifier que tu peux bien ENREGISTRER ces changements dans le fichier lui-même et pas seulement me les montrer. Utilise pour cela les capacités d'écriture de fich
+
+iers qui ont été ajoutées à ton système.

# 2025-03-31 20:08:40.267695
+## Contexte
+Tu as précédemment identifié plusieurs corrections à apporter à notre agent IA de rédaction de mémoire. Je souhaite vérifier que tu es bien capable d'appliquer directemen
+
+
+t ces modifications aux fichiers sources.
+
+## Action demandée
+Je te demande d'ÉCRIRE et de MODIFIER directement le fichier backend/services/memory_service.py pour ajouter la méthode get_entreprises() que tu as déjà identifiée.      
+
+
+
+## Détails de la modification
+Tu as déjà fourni le code correct pour cette méthode:
+
+```python
+async def get_entreprises(self) -> List[Dict]:
+    """Récupère la liste des entreprises"""
+    def _get_entreprises():
+        conn = self.get_connection()
+        try:
+            cursor = conn.cursor()
+            cursor.execute('''
+                SELECT id, nom, date_debut,
+                    COALESCE(date_fin, '') as date_fin
+                FROM entreprises
+                ORDER BY date_debut DESC
+            ''')
+            return [dict(row) for row in cursor.fetchall()]
+        except Exception as e:
+            logger.error(f"Erreur DB: {str(e)}")
+            return []
+        finally:
+            conn.close()
+    return await asyncio.to_thread(_get_entreprises)
+Instructions
+
+Utilise ta fonctionnalité d'écriture de fichiers pour APPLIQUER cette modification directement
+MODIFIE le fichier backend/services/memory_service.py pour y ajouter cette méthode
+CONFIRME que la modification a été effectuée
+
+Je veux vérifier que tu peux bien ENREGISTRER ces changements dans le fichier lui-même et pas seulement me les montrer. Utilise pour cela les capacités d'écriture de fich
+
+
+iers qui ont été ajoutées à ton système.

# 2025-03-31 20:13:30.293825
+auto_apply on

# 2025-03-31 20:14:11.102324
+## Action demandée
+Je te demande d'ÉCRIRE et de MODIFIER directement le fichier backend/services/memory_service.py pour ajouter la méthode get_entreprises() ```python
+async def get_entreprises(self) -> List[Dict]:
+    """Récupère la liste des entreprises"""
+    def _get_entreprises():
+        conn = self.get_connection()
+        try:
+            cursor = conn.cursor()
+            cursor.execute('''
+                SELECT id, nom, date_debut,
+                    COALESCE(date_fin, '') as date_fin
+                FROM entreprises
+                ORDER BY date_debut DESC
+            ''')
+            return [dict(row) for row in cursor.fetchall()]
+        except Exception as e:
+            logger.error(f"Erreur DB: {str(e)}")
+            return []
+        finally:
+            conn.close()
+    return await asyncio.to_thread(_get_entreprises)
